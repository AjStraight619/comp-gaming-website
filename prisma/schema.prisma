generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  firstName        String?
  lastName         String?
  email            String?      @unique
  phoneNumber      String?      @unique
  finishedSettingUp Boolean     @default(false)
  accounts         LinkedAccount[]
  userTeams        UserTeam[]      
  userStats        UserStats[]
  leaderboard      Leaderboard?
  clerkUserId      String?      @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model LinkedAccount {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  accountType AccountType
  accountName String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Game {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  maps        Map[]
  matches     Match[]
}

model Match {
  id              String       @id @default(cuid())
  gameId          String
  game            Game         @relation(fields: [gameId], references: [id])
  isInProgress    Boolean
  startTime       DateTime
  endTime         DateTime?
  gameType        GameType
  teamAId         String?
  teamBId         String?
  teamA           Team?        @relation("TeamAMatch", fields: [teamAId], references: [id])
  teamB           Team?        @relation("TeamBMatch", fields: [teamBId], references: [id])
  winnerId        String?
  winner          Team?        @relation("WinningTeam", fields: [winnerId], references: [id])
  isReported      Boolean      @default(false)
  reportingTeamId String?      // Track the team that reported the win
  reportingTeam   Team?        @relation("ReportingTeam", fields: [reportingTeamId], references: [id]) // Team that reported this match
  userStats       UserStats[]
  matchFormat     MatchFormat
  teamType        TeamType
  selectedMaps    Map[]        @relation("MatchMaps")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  disputes        Dispute[]    
}

model Map {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String?
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  matches   Match[]  @relation("MatchMaps")
}

model Team {
  id              String       @id @default(cuid())
  name            String
  teamType        TeamType
  maxPlayers      Int
  userTeams       UserTeam[]
  matchesAsTeamA  Match[]      @relation("TeamAMatch")
  matchesAsTeamB  Match[]      @relation("TeamBMatch")
  matchesWon      Match[]      @relation("WinningTeam")
  disputesRaised  Dispute[]    @relation("RaisedByTeam")
  reportedMatches Match[]      @relation("ReportingTeam") 
  wins            Int          @default(0)
  losses          Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model UserTeam {
  id        String @id @default(cuid())
  userId    String
  teamId    String
  user      User   @relation(fields: [userId], references: [id])
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade) 
  createdAt DateTime @default(now())

  @@unique([userId, teamId]) 
}

model UserStats {
  id        String  @id @default(cuid())
  matchId   String
  match     Match   @relation(fields: [matchId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  kills     Int
  deaths    Int
  assists   Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leaderboard {
  id         String  @id @default(cuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id])
  totalKills Int
  totalDeaths Int
  winCount   Int
  rank       Int
  updatedAt  DateTime @updatedAt
}

model Dispute {
  id            String   @id @default(cuid())
  matchId       String
  match         Match    @relation(fields: [matchId], references: [id])
  raisedByTeamId String
  raisedByTeam  Team     @relation("RaisedByTeam", fields: [raisedByTeamId], references: [id])
  reason        String   
  isResolved    Boolean  @default(false)
  resolution    String?  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum AccountType {
  BattleNet
  Activision
}

enum MatchFormat {
  BO1
  BO3
  BO5
}

enum TeamType {
  Solo
  Duo
  Squad
}

enum GameType {
  Hardpoint
  SnD
  Variant
}





